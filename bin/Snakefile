#-- settings for all workflows --#
config['pipeline']['username'] = getpass.getuser()
config['pipeline']['email'] = config['email']

#-- workflow selection --#
if config['pipeline']['config'] == 'create':
    include: snake_dir + 'db_create/Snakefile'
elif config['pipeline']['config'] == 'update':
    include: snake_dir + 'db_update/Snakefile'
else:
    msg ='Pipeline "config" param not recognized: {}'
    raise ValueError(msg.format(config['pipeline']['config']))


# final output files (both db-create & db-update workflows)
def all_which_input(wildcards):
    """
    The final output files for both db_create & db_update
    """
    F = []    
    # kraken2
    if not skipped(config['databases']['kraken2']):
        F.append(os.path.join(kraken2_dir, 'hash.k2d'))
        F.append(os.path.join(kraken2_dir, 'opts.k2d'))
        F.append(os.path.join(kraken2_dir, 'taxo.k2d'))
        F.append(os.path.join(kraken2_dir, 'seqid2taxid.map'))
        # bracken
        if not skipped(config['databases']['bracken']):
    	    F += expand(os.path.join(kraken2_dir, 'database{read_len}mers.kraken'),
	                read_len = config['params']['bracken']['build_read_lens'])
    # genes
    if not skipped(config['databases']['genes']):
        F.append(genes_dir + 'genome_reps_filtered.fna.gz')
        F.append(genes_dir + 'genome_reps_filtered.faa.gz')
        F.append(genes_dir + 'genome_reps_filtered.txt.gz')
        if str(config['keep_intermediate']) == 'True':
            # mmseqs gene database
            F.append(genes_dir + 'genes_db.tar.gz')
            ## mmseqs cluster database
            F.append(genes_dir + 'cluster/clusters_db.tar.gz')
            ## cluster membership info
            F.append(genes_dir + 'cluster/clusters_membership.tsv.gz')
            ## cluster rep sequences
            F.append(genes_dir + 'cluster/clusters_reps.faa.gz')       
    # humann3
    if (not skipped(config['databases']['humann3_bowtie2']) and
        not skipped(config['databases']['humann3_diamond'])):
        # multiple UniRef cutoffs
        uniref_cutoffs = [config['uniref_name']]
        dmnd_names = [config['dmnd_name']]
        if config['uniref_name'] != 'uniref50' and not skipped(config['cluster_idx']):
            uniref_cutoffs.append('uniref50')
            x = re.sub('([Uu])ni([Rr])ef90', '\\1ni\\2ef50', config['dmnd_name'])
            dmnd_names.append(x)
        # intermediate files
        if str(config['keep_intermediate']) == 'True':
            # annotation hits
            F.append(humann3_dir + 'annotation_hits.gz')
            ## annotated genes (all)
            F += expand(humann3_dir + '{uniref}/genome_reps_filt_annot.fna.gz',
                        uniref = uniref_cutoffs)
            F += expand(humann3_dir + '{uniref}/genome_reps_filt_annot.faa.gz',
                        uniref = uniref_cutoffs)
            F += expand(humann3_dir + '{uniref}/genome_reps_filt_annot.tsv.gz',
                        uniref = uniref_cutoffs)
        ## databases
        ### bowtie2
        if not skipped(config['databases']['humann3_bowtie2']):
            F += expand(os.path.join(humann3_dir + '{uniref}', 'bowtie2_build.done'),
                        uniref = uniref_cutoffs)
        ### diamond
        if not skipped(config['databases']['humann3_diamond']):
            x = os.path.join(humann3_dir, '{uniref}', 'protein_database', '{dmnd}')
            for u,d in zip(uniref_cutoffs, dmnd_names):                               
                F.append(x.format(uniref=u,dmnd=d))
                        
    # metaphlan
    if not skipped(config['databases']['metaphlan3']):
        F += expand(config['tmp_dir'] + '{uniref}/metaphlan3/species_specific.txt',
                    uniref = uniref_cutoffs)        
    
    # ret
    return F
