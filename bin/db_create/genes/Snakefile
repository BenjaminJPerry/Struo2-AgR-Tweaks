rule prodigal:
    """
    For each genome, running prodigal to call genes
    """
    input:
        fasta = lambda wildcards: \
	  config['samples'].loc[wildcards.sample, config['fasta_file_path_col']]
    output:
        fna = temp(config['tmp_dir'] + 'prodigal/{sample}.fna'),
        faa = temp(config['tmp_dir'] + 'prodigal/{sample}.faa'),
        gbk = temp(config['tmp_dir'] + 'prodigal/{sample}.gbk')
    params:
        params = config['params']['genes']['prodigal']
    resources:
        time = lambda wildcards, attempt: attempt ** 2 * 59,
        n = lambda wildcards, attempt, threads: threads,
        mem_gb_pt = lambda wildcards, attempt: attempt * 8 + 12
    conda:
        '../../envs/genes.yaml'
    log:
        log_dir + 'prodigal/{sample}.log'
    benchmark:
        benchmark_dir + 'prodigal/{sample}.txt'
    shell:
        """
        gunzip -c {input.fasta} | \
          prodigal {params.params} \
          -o {output.gbk} -d {output.fna} -a {output.faa} \
          2> {log} 1>&2
        """    

rule vsearch_per_genome:
    """
    For each genome, clustering genes (at nuc level) and taking the centroid. 
    """
    input:
        fna = config['tmp_dir'] + 'prodigal/{sample}.fna',
        faa = config['tmp_dir'] + 'prodigal/{sample}.faa'
    output:
        reps = temp(config['tmp_dir'] + 'vsearch/{sample}_reps.fna')
    params:
        params = config['params']['genes']['vsearch_per_genome']
    threads:
        4
    resources:
        time = lambda wildcards, attempt: attempt ** 3 * 59,
        n = lambda wildcards, attempt, threads: threads,
        mem_gb_pt = lambda wildcards, attempt: attempt * 3
    conda:
        '../../envs/genes.yaml'
    log:
        log_dir + 'vsearch_per_genome/{sample}.log'
    benchmark:
        benchmark_dir + 'vsearch_per_genome/{sample}.txt'
    shell:
        """
        vsearch {params.params} \
          --threads {threads} \
          --cluster_fast {input.fna} \
          --centroids {output.reps} \
          2> {log} 1>&2
        """
        
rule filter_gene_seqs:
    """
    Filtering the amino acid gene sequences to just the vsearch cluster reps (nucleotide).
    Renaming as [seq_name]|gene_length|taxonomy
    """
    input:
        fasta = lambda wildcards: \
	  config['samples'].loc[wildcards.sample, config['fasta_file_path_col']],
        reps = config['tmp_dir'] + 'vsearch/{sample}_reps.fna',
        faa = config['tmp_dir'] + 'prodigal/{sample}.faa'
    output:
        fna = temp(config['tmp_dir'] + 'nuc_filtered/{sample}_reps.fna'),
        faa = temp(config['tmp_dir'] + 'prot_filtered/{sample}_reps.faa'),
        txt = temp(config['tmp_dir'] + 'names_filtered/{sample}_reps.txt')
    params:
        exe = config['pipeline']['script_folder'] + 'filter_seqs.py',
        tax = lambda wildcards: \
                config['samples'].loc[wildcards.sample, config['taxonomy_col']],
        taxID = lambda wildcards: \
	          config['samples'].loc[wildcards.sample, config['taxID_col']],
        acc = lambda wildcards: \
	      config['samples'].loc[wildcards.sample, config['accession_col']]
    resources:
        time = lambda wildcards, attempt: attempt ** 2 * 59,
        mem_gb_pt = lambda wildcards, attempt: attempt ** 3 * 8
    conda:
        '../../envs/genes.yaml'
    log:
        log_dir + 'filter_gene_seqs/{sample}.log'
    benchmark:
        benchmark_dir + 'filter_gene_seqs/{sample}.txt'
    shell:
        """ 
        {params.exe} --taxonomy "{params.tax}" \
           --taxID {params.taxID} \
           --accession {params.acc} \
           --genome-file {input.fasta} \
           {input.reps} {input.faa} \
           {output.fna} {output.faa} \
           > {output.txt} 2> {log}
        """        
                
rule genes_combine_fna:
    """
    For all per-genome de-replicated genes of all genomes, combining into 1 collection
    """
    input:
        fna = expand(config['tmp_dir'] + 'nuc_filtered/{sample}_reps.fna',
                     sample = config['samples_unique'])
    output:
        fna = temp(config['tmp_dir'] + 'filtered_reps.fna')
    resources:
        time = lambda wildcards, attempt: attempt ** 2 * 59
    run:
        cat_files(input.fna, outfile=output.fna) 

rule genes_combine_faa:
    """
    For all per-genome de-replicated genes of all genomes, combining into 1 collection
    """
    input:
        faa = expand(config['tmp_dir'] + 'prot_filtered/{sample}_reps.faa',
                     sample = config['samples_unique'])
    output:
        faa = temp(config['tmp_dir'] + 'filtered_reps.faa')
    resources:
        time = lambda wildcards, attempt: attempt ** 2 * 59
    run:
        cat_files(input.faa, outfile=output.faa) 

rule genes_combine_txt:
    """
    For all per-genome de-replicated genes of all genomes, combining into 1 collection
    """
    input:
        txt = expand(config['tmp_dir'] + 'names_filtered/{sample}_reps.txt',
                     sample = config['samples_unique'])
    output:
        txt = temp(config['tmp_dir'] + 'filtered_reps.txt')
    resources:
        time = lambda wildcards, attempt: attempt ** 2 * 59
    run:
        cat_files(input.txt, outfile=output.txt, header=True) 

rule check_gene_info:
    """
    Copying gene info to the output directory
    """
    input:
        fna = config['tmp_dir'] + 'filtered_reps.fna',
        faa = config['tmp_dir'] + 'filtered_reps.faa',
        txt = config['tmp_dir'] + 'filtered_reps.txt'
    output:
        done = genes_dir + 'genome_reps_filtered.check.done'
    params:
        exe = config['pipeline']['script_folder'] + 'check_gene_info.py'
    resources:
        time = lambda wildcards, attempt: attempt ** 3 * 59,
        mem_gb_pt = lambda wildcards, attempt: attempt * 8
    log:
        log_dir + 'check_gene_info/all.log'
    benchmark:
        benchmark_dir + 'check_gene_info/all.txt'
    shell:
        """
        {params.exe} -n {input.fna} {input.faa} {input.txt} 2> {log} 1>&2
        touch {output.done} 2>> {log}
        """    
        
rule copy_gene_info:
    """
    Copying gene info to output directory
    """
    input:
        fna = config['tmp_dir'] + 'filtered_reps.fna',
        faa = config['tmp_dir'] + 'filtered_reps.faa',
        txt = config['tmp_dir'] + 'filtered_reps.txt',
        done = genes_dir + 'genome_reps_filtered.check.done'
    output:
        fna = genes_dir + 'genome_reps_filtered.fna.gz',
        faa = genes_dir + 'genome_reps_filtered.faa.gz',
        txt = genes_dir + 'genome_reps_filtered.txt.gz'
    params:
        ionice = config['params']['ionice']
    resources:
        time = lambda wildcards, attempt: attempt ** 3 * 59,
        mem_gb_pt = lambda wildcards, attempt: attempt * 8
    log:
        log_dir + 'copy_gene_info/all.log'
    benchmark:
        benchmark_dir + 'copy_gene_info/all.txt'
    shell:
        """
        ionice {params.ionice} gzip -c {input.fna} > {output.fna} 2> {log}
        ionice {params.ionice} gzip -c {input.faa} > {output.faa} 2>> {log}
        ionice {params.ionice} gzip -c {input.txt} > {output.txt} 2>> {log}
        """
    
rule mmseqs_db_create:
    """ 
    Creating mmseqs2 database that will be used for clustering
    """
    input:
        fna = config['tmp_dir'] + 'filtered_reps.fna',
        faa = config['tmp_dir'] + 'filtered_reps.faa',
        txt = config['tmp_dir'] + 'filtered_reps.txt'
    output:
        db = temp(config['tmp_dir'] + 'cluster/genes_db'),
        db_t = temp(config['tmp_dir'] + 'cluster/genes_db.dbtype'),
        db_i = temp(config['tmp_dir'] + 'cluster/genes_db.index'),
        db_l = temp(config['tmp_dir'] + 'cluster/genes_db.lookup'),
        db_s = temp(config['tmp_dir'] + 'cluster/genes_db.source'),
        db_h = temp(config['tmp_dir'] + 'cluster/genes_db_h'),
        db_ht = temp(config['tmp_dir'] + 'cluster/genes_db_h.dbtype'),
        db_hi = temp(config['tmp_dir'] + 'cluster/genes_db_h.index')
    resources:
        time = lambda wildcards, attempt: attempt ** 3 * 59,
        mem_gb_pt = lambda wildcards, attempt: attempt ** 3 * 20 + 20
    conda:
        '../../envs/genes.yaml'
    log:
        log_dir + 'mmseqs_db_create/all.log'
    benchmark:
        benchmark_dir + 'mmseqs_db_create/all.txt'
    shell:
        """
        mmseqs createdb {input.faa} {output.db} 2> {log} 1>&2
        """

def mmseqs_cluster_mem(wildcards, input, threads, attempt):
    """
    Setting the memmory used for mmseqs_cluster based on the size of the
    input mmseqs genes database.
    """
    db_size = os.stat(input.db).st_size / 1e9
    mem = round(db_size * 4 / threads + 1.499,0)
    mem = (attempt - 1) ** 2 + 1 + mem
    return int(mem)
    
rule mmseqs_cluster:
    """
    Clustering the mmseqs gene database
    """
    input:
        db = config['tmp_dir'] + 'cluster/genes_db',
        db_t = config['tmp_dir'] + 'cluster/genes_db.dbtype',
        db_i = config['tmp_dir'] + 'cluster/genes_db.index',
        db_s = config['tmp_dir'] + 'cluster/genes_db.source',
        db_h = config['tmp_dir'] + 'cluster/genes_db_h',
        db_ht = config['tmp_dir'] + 'cluster/genes_db_h.dbtype',
        db_hi = config['tmp_dir'] + 'cluster/genes_db_h.index'
    output:
        dbx = temp(config['tmp_dir'] + 'cluster/clusters_db'),
        db = temp(expand(config['tmp_dir'] + 'cluster/clusters_db.{X}',
                         X = range(12))),
        db_t = temp(config['tmp_dir'] + 'cluster/clusters_db.dbtype'),
        db_i = temp(config['tmp_dir'] + 'cluster/clusters_db.index'),
        db_h = temp(config['tmp_dir'] + 'cluster/clusters_db_h')
    params:
        db = config['tmp_dir'] + 'cluster/clusters_db',
        params = config['params']['genes']['mmseqs_cluster'],
        cluster = config['params']['genes']['mmseqs_cluster_method'],
        tmp_dir = config['tmp_dir'] + 'cluster_TMP'
    threads:
        12
    resources:
        time = lambda wildcards, attempt: attempt * 2 * 60 * 48,
        n = lambda wildcards, input, attempt, threads: threads,
        mem_gb_pt = mmseqs_cluster_mem
    conda:
        '../../envs/genes.yaml'
    log:
        log_dir + 'mmseqs_cluster/all.log'
    benchmark:
        benchmark_dir + 'mmseqs_cluster/all.txt'
    shell:
        """
        # removing existing output
        rm -rf {params.tmp_dir} 2> {log} && mkdir -p {params.tmp_dir} 2>> {log}
        rm -f {output.db_t} 2>> {log}
        # clustering
        mmseqs {params.cluster} {params.params} --threads {threads} \
          {input.db} {params.db} {params.tmp_dir} 2>> {log} 1>&2
        touch {output.dbx} {output.db_h} 2>> {log}
        """
        
rule mmseqs_cluster_membership:
    """
    Getting a table of which genes belong to which cluster (cluster membership).
    Output table format: cluster_rep<tab>cluster_member
    The "cluster_rep" is the de-facto cluster_id
    """
    input:
        db = config['tmp_dir'] + 'cluster/genes_db',
        db_t = config['tmp_dir'] + 'cluster/genes_db.dbtype',
        db_i = config['tmp_dir'] + 'cluster/genes_db.index',
        db_h = config['tmp_dir'] + 'cluster/genes_db_h',
        db_ht = config['tmp_dir'] + 'cluster/genes_db_h.dbtype',
        db_hi = config['tmp_dir'] + 'cluster/genes_db_h.index',
        db_clu = expand(config['tmp_dir'] + 'cluster/clusters_db.{X}',
                        X = range(12)),
        db_clu_t = config['tmp_dir'] + 'cluster/clusters_db.dbtype',
        db_clu_i = config['tmp_dir'] + 'cluster/clusters_db.index',
        db_clu_h = config['tmp_dir'] + 'cluster/clusters_db_h'
    output:
        tsv = temp(config['tmp_dir'] + 'cluster/clusters_membership.tsv')
    params:
        db_clu = config['tmp_dir'] + 'cluster/clusters_db'
    threads:
        4
    resources:
        time = lambda wildcards, attempt: attempt ** 3 * 59,
        n = lambda wildcards, attempt, threads: threads,
        mem_gb_pt = lambda wildcards, attempt: attempt ** 3 + 5
    conda:
        '../../envs/genes.yaml'
    log:
        log_dir + 'mmseqs_cluster_membership/all.log'
    benchmark:
        benchmark_dir + 'mmseqs_cluster_membership/all.txt'
    shell:
        """
        mmseqs createtsv --threads {threads} {input.db} {input.db} \
          {params.db_clu} {output.tsv} 2> {log} 1>&2
        """
        
rule mmseqs_cluster_rep_db:
    """ 
    Creating an mmseqs database of 1 representative for each cluster.    
    """
    input:
        db = config['tmp_dir'] + 'cluster/genes_db',
        db_t = config['tmp_dir'] + 'cluster/genes_db.dbtype',
        db_i = config['tmp_dir'] + 'cluster/genes_db.index',
        db_l = config['tmp_dir'] + 'cluster/genes_db.lookup',
        db_s = config['tmp_dir'] + 'cluster/genes_db.source',
        db_h = config['tmp_dir'] + 'cluster/genes_db_h',
        db_ht = config['tmp_dir'] + 'cluster/genes_db_h.dbtype',
        db_hi = config['tmp_dir'] + 'cluster/genes_db_h.index',
        db_clu = expand(config['tmp_dir'] + 'cluster/clusters_db.{X}',
                        X = range(12)),
        db_clu_t = config['tmp_dir'] + 'cluster/clusters_db.dbtype',
        db_clu_i = config['tmp_dir'] + 'cluster/clusters_db.index',
        db_clu_h = config['tmp_dir'] + 'cluster/clusters_db_h'
    output:
        db = temp(config['tmp_dir'] + 'cluster/clusters_reps_db'),
        db_t = temp(config['tmp_dir'] + 'cluster/clusters_reps_db.dbtype'),
        db_i = temp(config['tmp_dir'] + 'cluster/clusters_reps_db.index'),
        db_h = temp(config['tmp_dir'] + 'cluster/clusters_reps_db_h')
    params:
        db_clu = config['tmp_dir'] + 'cluster/clusters_db'
    resources:
        time = lambda wildcards, attempt: attempt ** 3 * 59,
        mem_gb_pt = lambda wildcards, attempt: attempt ** 3 * 12
    conda:
        '../../envs/genes.yaml'
    log:
        log_dir + 'mmseqs_cluster_rep_db/all.log'
    benchmark:
        benchmark_dir + 'mmseqs_cluster_rep_db/all.txt'
    shell:
        """
        mmseqs createsubdb {params.db_clu} {input.db} {output.db} 2> {log} 1>&2
        """
       
rule mmseqs_cluster_rep_seqs:
    """ 
    Creating fasta flat file (amino acid) for representative sequence database
    """
    input:
        db = config['tmp_dir'] + 'cluster/clusters_reps_db',
        db_t = config['tmp_dir'] + 'cluster/clusters_reps_db.dbtype',
        db_i = config['tmp_dir'] + 'cluster/clusters_reps_db.index',
        db_h = config['tmp_dir'] + 'cluster/clusters_reps_db_h'
    output:
        fasta = temp(config['tmp_dir'] + 'cluster/clusters_reps.faa')
    resources:
        time = lambda wildcards, attempt: attempt ** 3 * 59,
        mem_gb_pt = lambda wildcards, attempt: attempt ** 3 * 12
    conda:
        '../../envs/genes.yaml'
    log:
        log_dir + 'mmseqs2_cluster_rep_seqs/all.log'
    benchmark:
        benchmark_dir + 'mmseqs2_cluster_rep_seqs/all.txt'
    shell:
        """
        mmseqs convert2fasta {input.db} {output.fasta} 2> {log} 1>&2
        """
        
rule mmseqs_copy_db:
    """
    Copying the database and cluster database to the output directory.
    """
    input:
        db = config['tmp_dir'] + 'cluster/genes_db',
        db_t = config['tmp_dir'] + 'cluster/genes_db.dbtype',
        db_i = config['tmp_dir'] + 'cluster/genes_db.index',
        db_l = config['tmp_dir'] + 'cluster/genes_db.lookup',
        db_s = config['tmp_dir'] + 'cluster/genes_db.source',
        db_h = config['tmp_dir'] + 'cluster/genes_db_h',
        db_ht = config['tmp_dir'] + 'cluster/genes_db_h.dbtype',
        db_hi = config['tmp_dir'] + 'cluster/genes_db_h.index',
        db_clux = config['tmp_dir'] + 'cluster/clusters_db',
        db_clu = expand(config['tmp_dir'] + 'cluster/clusters_db.{X}',
                        X = range(12)),
        db_clu_t = config['tmp_dir'] + 'cluster/clusters_db.dbtype',
        db_clu_i = config['tmp_dir'] + 'cluster/clusters_db.index',
        db_clu_h = config['tmp_dir'] + 'cluster/clusters_db_h',
        tsv = config['tmp_dir'] + 'cluster/clusters_membership.tsv',
        faa = config['tmp_dir'] + 'cluster/clusters_reps.faa'
    output:
        db = genes_dir + 'genes_db.tar.gz',
        db_clu = genes_dir + 'cluster/clusters_db.tar.gz',
        tsv = genes_dir + 'cluster/clusters_membership.tsv.gz',
        faa = genes_dir + 'cluster/clusters_reps.faa.gz'
    params:
        ionice = config['params']['ionice']
    resources:
        time = lambda wildcards, attempt: attempt ** 3 * 59,
        mem_gb_pt = lambda wildcards, attempt: attempt ** 3 * 6
    conda:
        '../../envs/genes.yaml'
    log:
        log_dir + 'mmseqs_db_copy/all.log'
    benchmark:
        benchmark_dir + 'mmseqs_db_copy/all.txt'
    shell:
        """        
        # genes database (tarball)
        ionice {params.ionice} tar -czvf {output.db} {input.db} {input.db_t} {input.db_i} \
          {input.db_l} {input.db_s} {input.db_h} {input.db_ht} {input.db_hi} 2> {log} 1>&2
        # cluster database (tarball)
        ionice {params.ionice} tar -czvf {output.db_clu} {input.db_clux} \
           {input.db_clu} {input.db_clu_t} {input.db_clu_i} {input.db_clu_h} \
           2>> {log} 1>&2
        # cluster membership
        ionice {params.ionice} gzip -c {input.tsv} > {output.tsv} 2>> {log}
        # cluster representatives
        ionice {params.ionice} gzip -c {input.faa} > {output.faa} 2>> {log}
        """

# rule mmseqs_tmp_db_rm:
#     """
#     Removing the mmseqs temp database
#     """
#     input:
#         db = config['tmp_dir'] + 'cluster/genes_db'
#     output:        
#         done = genes_dir + 'tmp_db_rm.done'
#     resources:
#         time = lambda wildcards, attempt: attempt ** 3 * 59
#     log:
#         log_dir + 'mmseqs_tmp_db_rm/all.log'
#     shell:
#         """
#         rm -rf `dirname {input.db}` 2> {log} 1>&2
#         """
