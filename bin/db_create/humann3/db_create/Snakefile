rule humann3_annotate_genes:
    """
    Use search hits from clustered reps & index table to annotate all
    genome-derep genes. The annotation for each cluster rep is propagated
    to each member of the cluster.
    """
    input:
        hits = config['tmp_dir'] + config['db_name'] + 'humann3_search/hits.txt',
        tsv = config['tmp_dir'] + 'humann3/clusters_membership.tsv.gz',
        fna = config['tmp_dir'] + 'humann3/genome_reps_filtered.fna.gz',
        faa = config['tmp_dir'] + 'humann3/genome_reps_filtered.faa.gz',
        txt = config['tmp_dir'] + 'humann3/genome_reps_filtered.txt.gz'
    output:
        fna = temp(config['tmp_dir'] + 'genome_reps_filt_annot.fna'),
        faa = temp(config['tmp_dir'] + 'genome_reps_filt_annot.faa'),
        tsv = temp(config['tmp_dir'] + 'genome_reps_filt_annot.tsv'),
    params:
        exe = config['pipeline']['script_folder'] + 'propagate_annotations.py',
        params = config['params']['humann3']['propagate_annotations']
    resources:
        time = lambda wildcards, attempt: attempt ** 3 * 59,
        mem_gb_pt = lambda wildcards, attempt: attempt ** 3 * 3 + 11,
    log:
        log_dir + 'hm3_annotate_genes/{}.log'.format(config['db_name'].rstrip('/'))
    benchmark:
        benchmark_dir + 'hm3_annotate_genes/{}.txt'.format(config['db_name'].rstrip('/'))
    shell:
        """
        {params.exe} {params.params} \
          --in-nuc {input.fna} \
          --out-nuc {output.fna} \
          --out-prot {output.faa} \
          {input.hits} {input.faa} \
          {input.txt} {input.tsv} \
          > {output.tsv} 2> {log}
        """

rule humann3_annotate_hits_copy:
    """
    Copying/compressing query hits (diamond or mmseqs) to the final output directory 
    """
    input:
        hits = config['tmp_dir'] + config['db_name'] + 'humann3_search/hits.txt'
    output:
        hits = humann3_dir + 'annotation_hits.gz'
    params:
        ionice = config['params']['ionice']
    resources:
        time = lambda wildcards, attempt: attempt ** 3 * 59
    log:
        log_dir + 'hm3_annotate_hits_copy/{}.log'.format(config['db_name'].rstrip('/'))
    shell:
        """
        ionice {params.ionice} gzip -c {input.hits} > {output.hits} 2> {log}
        """
        
rule humann3_annotate_genes_copy:
    """
    Copying/compressing annotated gene files to the final directory
    """
    input:
        fna = config['tmp_dir'] + 'genome_reps_filt_annot.fna',
        faa = config['tmp_dir'] + 'genome_reps_filt_annot.faa',
        tsv = config['tmp_dir'] + 'genome_reps_filt_annot.tsv'
    output:
        fna = humann3_dir + 'genome_reps_filt_annot.fna.gz',
        faa = humann3_dir + 'genome_reps_filt_annot.faa.gz',
        tsv = humann3_dir + 'genome_reps_filt_annot.tsv.gz'            
    params:
        ionice = config['params']['ionice']
    resources:
        time = lambda wildcards, attempt: attempt ** 3 * 59
    log:
        log_dir + 'hm3_annotate_genes_copy/{}.log'.format(config['db_name'].rstrip('/'))
    benchmark:
        benchmark_dir + 'hm3_annotate_genes_copy/{}.txt'.format(config['db_name'].rstrip('/'))
    shell:
        """
        ionice {params.ionice} gzip -c {input.fna} > {output.fna} 2> {log}
        ionice {params.ionice} gzip -c {input.faa} > {output.faa} 2>> {log}
        ionice {params.ionice} gzip -c {input.tsv} > {output.tsv} 2>> {log}
        """
    
rule humann3_bowtie2_build:
    """
    Running bowtie2 build on combined, annotated genes (nucleotide)
    """
    input:
        fna = config['tmp_dir'] + 'genome_reps_filt_annot.fna'
    output:
        touch(os.path.join(humann3_dir, 'bowtie2_build.done'))
    params:
        prefix = humann3_dir + 'all_genes_annot'
    conda:
        '../../../envs/humann3.yaml'
    threads:
        12
    resources:
        time = lambda wildcards, attempt: attempt * 2 * 60 * 24,
        n = lambda wildcards, attempt, threads: threads,
        mem_gb_pt = lambda wildcards, attempt: attempt ** 2 * 2 + 8,
        lg_idx = lambda wildcards, attempt: '--large-index' if attempt > 1 else ''
    log:
        log_dir + 'humann3_bowtie2_build/{}.log'.format(config['db_name'].rstrip('/'))
    benchmark:
        benchmark_dir + 'humann3_bowtie2_build/{}.txt'.format(config['db_name'].rstrip('/'))
    shell:
        """
        bowtie2-build --threads {threads} {resources.lg_idx} \
          {input.fna} {params.prefix} 2> {log} 1>&2

        # check that output exists
        OUTDIR=`dirname {params.prefix}`
        IDX_FILES=`find $OUTDIR -maxdepth 1 -name "*.bt2*"`
        IDX_FILES=`echo $IDX_FILES | perl -pe 's/ +/\n/g' | wc -l`
        if [ $IDX_FILES -lt 1 ]; then
          echo "ERROR: no bowtie2 index files found!"
          exit 1
        fi
        """    

rule humann3_diamond_makedb:
    """
    Running diamond makedb on combined, annotated genes (amino acid)
    """
    input:
        faa = config['tmp_dir'] + 'genome_reps_filt_annot.faa'
    output:
        os.path.join(humann3_dir, 'protein_database', config['dmnd_name'])
    params:
        tmp_dir = config['tmp_dir']
    conda:
        '../../../envs/humann3.yaml'
    resources:
        time = lambda wildcards, attempt: attempt * 2 * 60 * 24,
        mem_gb_pt = lambda wildcards, attempt: (attempt ** 3 + 2) * 12
    log:
        log_dir + 'humann3_diamond_makedb/{}.log'.format(config['db_name'].rstrip('/'))
    benchmark:
        benchmark_dir + 'humann3_diamond_makedb/{}.txt'.format(config['db_name'].rstrip('/'))
    shell:
        """
        PREF=`echo {output} | perl -pe 's/\.[^.]+$//'`
        diamond makedb --in {input.faa} -d $PREF 2> {log} 1>&2
        """    


