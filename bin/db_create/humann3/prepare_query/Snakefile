rule humann3_search_batch_seqs:
    """
    Splitting gene fasta for distributed searching
    """
    input:
        faa = genes_dir + 'cluster/clusters_reps.faa.gz'
    output:
        faa = temp(config['tmp_dir'] + 'fasta_split/clusters_reps.faa'),
        splt = temp(expand(config['tmp_dir'] + config['db_name'] + \
                           'humann3_search/clusters_reps.part-{splitID}.faa',
	                   splitID=config['params']['humann3']['splits']))
    params:
        ionice = config['params']['ionice'],         
        n_splits = config['params']['humann3']['batches'],
	out_dir = config['tmp_dir'] + config['db_name'] + 'humann3_search'
    resources:
        time = lambda wildcards, attempt: attempt ** 3 * 59,
        mem_gb_pt = lambda wildcards, attempt: attempt * 10
    conda:
        '../../../envs/genes.yaml'
    log:
        log_dir + 'humann3_search_batch_seqs/{}.log'.format(config['db_name'].rstrip('/'))
    benchmark:
        benchmark_dir + 'humann3_search_batch_seqs/{}.txt'.format(config['db_name'].rstrip('/'))
    shell:
        """
        echo "# Uncompressing fasta..." > {log}
        mkdir -p `dirname {output.faa}` 2>> {log}
        ionice {params.ionice} gunzip -c {input.faa} > {output.faa} 2>> {log}

        echo "# Splitting fasta..." >> {log}
        mkdir -p {params.out_dir} 2>> {log}
        fasta-splitter \
          --n-parts {params.n_splits} \
          --out-dir {params.out_dir} \
          {output.faa} 2>> {log} 1>&2
        """

