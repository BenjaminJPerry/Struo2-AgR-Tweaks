wildcard_constraints:
    sample="[^/]+"
    
rule humann3_diamond_batch_seqs:
    """
    Splitting gene fasta for distributed searching
    """
    input:
        faa = config['tmp_dir'] + 'cluster/clusters_reps.faa'
    output:
        temp(expand(config['tmp_dir'] + \
                    'humann3_dmnd/clusters_reps.part-{splitID}.faa',
	            splitID=config['params']['humann3']['splits']))
    params:
        n_splits = config['params']['humann3']['batches'],
	out_dir = config['tmp_dir'] + 'humann3_dmnd'
    resources:
        time = lambda wildcards, attempt: attempt ** 3 * 59,
        mem_gb_pt = lambda wildcards, attempt: attempt * 10
    conda:
        '../../envs/genes.yaml'
    log:
        log_dir + 'humann3_diamond_batch_seqs/all.log'
    benchmark:
        benchmark_dir + 'humann3_diamond_batch_seqs/all.txt'
    shell:
        """
        mkdir -p {params.out_dir} 2>> {log}

        fasta-splitter \
          --n-parts {params.n_splits} \
          --out-dir {params.out_dir} \
          {input} 2>> {log} 1>&2
        """

rule humann3_diamond_db_copy:
    """
    Copying the database to the temp directory
    """
    input:
        db = ancient(config['params']['humann3']['diamond_db'])
    output:
        db = temp(config['tmp_dir'] + 'humann3_dmnd/humann3_dmnd_db.dmnd')
    params:
        ionice = config['params']['ionice']
    resources:
        time = lambda wildcards, attempt: attempt ** 3 * 59,
        mem_gb_pt = lambda wildcards, attempt: attempt * 4
    log:
        log_dir + 'humann3_diamond_db_copy/all.log'
    benchmark:
        benchmark_dir + 'humann3_diamond_db_copy/all.txt'
    shell:
        """
        ionice {params.ionice} cp -f {input} {output} 2> {log} 1>&2 
        """    

def dmnd_start_mem(wildcards, attempt, threads=12):
    """Estimating the baseline memory to use for jobs, given the diamond database size
    """
    prot_db_size = os.stat(config['tmp_dir'] + 'humann3_dmnd/humann3_dmnd_db.dmnd').st_size / 1e9
    mem = round(prot_db_size * 5 / threads + 1.499,0)
    mem = (attempt - 1) * 2 + mem
    return int(mem)

rule humann3_diamond_pass1:
    """
    Annotating genes via diamond search of UniRef db
    """
    input:
        faa = config['tmp_dir'] + 'humann3_dmnd/clusters_reps.part-{splitID}.faa',
	dmnd_db = config['tmp_dir'] + 'humann3_dmnd/humann3_dmnd_db.dmnd'
    output:
        hits = temp(config['tmp_dir'] + 'humann3_dmnd/hits_pass1/{splitID}.txt'),
        unaln = temp(config['tmp_dir'] + 'humann3_dmnd/unaln/{splitID}.faa')
    params:
        params = config['params']['humann3']['diamond'],
        tmp_dir = config['tmp_dir'] + 'humann3_dmnd_TMP/{splitID}/'
    threads:
        8
    resources:
        time = lambda wildcards, attempt: attempt ** 2 * 60 * 12,
        n = lambda wildcards, attempt, threads: threads,
        mem_gb_pt = dmnd_start_mem
    conda:
        '../../envs/humann3.yaml'
    log:
        log_dir + 'hm3_diamond_pass1/{splitID}.log'
    benchmark:
        benchmark_dir + 'hm3_diamond_pass1/{splitID}.txt'
    shell:
        """
        TMPDIR="{params.tmp_dir}"
        mkdir -p $TMPDIR 2> {log}

        # diamond run
        diamond blastp {params.params} \
          --tmpdir $TMPDIR --threads {threads} \
          -q {input.faa} -d {input.dmnd_db} \
          -o {output.hits} --un {output.unaln} \
          --outfmt 6 qseqid sseqid evalue \
          2>> {log} 1>&2
        """

rule humann3_diamond_pass2:
    """
    Annotating genes via diamond search of UniRef db
    """
    input:
        faa = config['tmp_dir'] + 'humann3_dmnd/unaln/{splitID}.faa',
	dmnd_db = config['tmp_dir'] + 'humann3_dmnd/humann3_dmnd_db.dmnd'
    output:
        hits = temp(config['tmp_dir'] + 'humann3_dmnd/hits_pass2/{splitID}.txt')
    params:
        params = config['params']['humann3']['diamond'],
        tmp_dir = config['tmp_dir'] + 'humann3_dmnd_TMP/{splitID}/'
    threads:
        8
    resources:
        time = lambda wildcards, attempt: attempt * 60 * 48,
        n = lambda wildcards, attempt, threads: threads,
        mem_gb_pt = dmnd_start_mem
    conda:
        '../../envs/humann3.yaml'
    log:
        log_dir + 'hm3_diamond_pass2/{splitID}.log'
    benchmark:
        benchmark_dir + 'hm3_diamond_pass2/{splitID}.txt'
    shell:
        """
        NSEQ=`seqkit seq -n {input.faa} | wc -l 2> {log}`
        if [[ "$NSEQ" -gt "0" ]]; then 
          TMPDIR="{params.tmp_dir}"
          mkdir -p $TMPDIR 2>> {log}
          # diamond run
          diamond blastp --sensitive {params.params} \
            --tmpdir $TMPDIR --threads {threads} \
            -q {input.faa} -d {input.dmnd_db} -o {output.hits} \
            --outfmt 6 qseqid sseqid evalue \
            2>> {log} 1>&2
        else
          touch {output.hits} 2> {log} 1>&2
          echo "No unaligned sequences. Skipping DIAMOND" >> {log}
        fi
        """        
        
rule humann3_diamond_merge:
    """
    Merging the results
    """
    input:
        hits1 = expand(config['tmp_dir'] + 'humann3_dmnd/hits_pass1/{splitID}.txt',
	               splitID=config['params']['humann3']['splits']),
        hits2 = expand(config['tmp_dir'] + 'humann3_dmnd/hits_pass2/{splitID}.txt',
	               splitID=config['params']['humann3']['splits'])
    output:
        hits = config['tmp_dir'] + 'humann3_dmnd/hits.txt'
    resources:
        time = lambda wildcards, attempt: attempt ** 3 * 59
    run:
        with open(output.hits, 'w') as outF:
            for F in input.hits1 + input.hits2:
                with open(F) as inF:
                    for line in inF:
                        outF.write(line)

rule humann3_annotate_genes:
    """
    Use DIAMOND hits from clustered reps & index table to annotate all
    genome-derep genes. The annotation for each cluster rep is propagated
    to each member of the cluster.
    """
    input:
        hits = config['tmp_dir'] + 'humann3_dmnd/hits.txt',
        fna = config['tmp_dir'] + 'filtered_reps.fna',
        faa = config['tmp_dir'] + 'filtered_reps.faa',
        txt = config['tmp_dir'] + 'filtered_reps.txt',
        tsv = config['tmp_dir'] + 'cluster/clusters_membership.tsv'
    output:
        fna = temp(config['tmp_dir'] + 'filtered_reps_annot.fna'),
        faa = temp(config['tmp_dir'] + 'filtered_reps_annot.faa'),
        tsv = temp(config['tmp_dir'] + 'filtered_reps_annot.tsv')
    params:
        exe = config['pipeline']['script_folder'] + 'propagate_annotations.py'
    resources:
        time = lambda wildcards, attempt: attempt ** 3 * 59,
        mem_gb_pt = lambda wildcards, attempt: attempt * 4 + 4
    log:
        log_dir + 'hm3_annotate_genes/all.log'
    benchmark:
        benchmark_dir + 'hm3_annotate_genes/all.txt'
    shell:
        """
        {params.exe} \
          --in-nuc {input.fna} \
          --out-nuc {output.fna} \
          --out-prot {output.faa} \
          {input.hits} {input.faa} \
          {input.txt} {input.tsv} \
          > {output.tsv} 2> {log}
        """
rule humann3_annotate_genes_copy:
    """
    Copying annotated gene files to the final directory
    """
    input:
        fna = config['tmp_dir'] + 'filtered_reps_annot.fna',
        faa = config['tmp_dir'] + 'filtered_reps_annot.faa',
        tsv = config['tmp_dir'] + 'filtered_reps_annot.tsv'
    output:
        fna = humann3_dir + 'filtered_reps_annot.fna.gz',
        faa = humann3_dir + 'filtered_reps_annot.faa.gz',
        tsv = humann3_dir + 'filtered_reps_annot.tsv.gz'            
    params:
        ionice = config['params']['ionice']
    resources:
        time = lambda wildcards, attempt: attempt ** 3 * 59
    log:
        log_dir + 'hm3_annotate_genes_copy/all.log'
    benchmark:
        benchmark_dir + 'hm3_annotate_genes_copy/all.txt'
    shell:
        """
        ionice {params.ionice} gzip -c {input.fna} > {output.fna} 2> {log}
        ionice {params.ionice} gzip -c {input.faa} > {output.faa} 2>> {log}
        ionice {params.ionice} gzip -c {input.tsv} > {output.tsv} 2>> {log}
        """
