wildcard_constraints:
    sample="[^/]+"

rule mmseqs_db_create_user_provided:
    """ 
    Creating mmseqs2 database for user-provided sequences
    """
    input:
        faa = config['humann_prot_seqs']
    output:
        db = temp(config['tmp_dir'] + 'user_genes/genes_db'),
        db_t = temp(config['tmp_dir'] + 'user_genes/genes_db.dbtype'),
        db_i = temp(config['tmp_dir'] + 'user_genes/genes_db.index'),
        db_h = temp(config['tmp_dir'] + 'user_genes/genes_db_h'),
        db_ht = temp(config['tmp_dir'] + 'user_genes/genes_db_h.dbtype'),
        db_hi = temp(config['tmp_dir'] + 'user_genes/genes_db_h.index')
    resources:
        time = lambda wildcards, attempt: attempt ** 3 * 59,
        mem_gb_pt = lambda wildcards, attempt: attempt ** 3 * 20 + 20
    conda:
        '../envs/genes.yaml'
    log:
        log_dir + 'mmseqs_db_create_user_provided/all.log'
    benchmark:
        benchmark_dir + 'mmseqs_db_create_user_provided/all.txt'
    shell:
        """
        mmseqs createdb {input} {output.db} 2> {log} 1>&2
        """
        

    
rule mmseqs_cluster_db_update:
    """
    Updating cluster db with user-provided AA sequences
    """
    input:
        db = ancient(genes_dir + 'cluster/genes_db'),
        db_t = ancient(genes_dir + 'cluster/genes_db.dbtype'),
        db_i = ancient(genes_dir + 'cluster/genes_db.index'),
        db_h = ancient(genes_dir + 'cluster/genes_db_h'),
        db_ht = ancient(genes_dir + 'cluster/genes_db_h.dbtype'),
        db_hi = ancient(genes_dir + 'cluster/genes_db_h.index'),
        db_clu = ancient(expand(genes_dir + 'cluster/clusters_db.{X}',
                                X = range(12))),
        db_clu_t = ancient(genes_dir + 'cluster/clusters_db.dbtype'),
        db_clu_i = ancient(genes_dir + 'cluster/clusters_db.index'),
        db_clu_h = ancient(genes_dir + 'cluster/clusters_db_h'),
        db2 = config['tmp_dir'] + 'user_genes/genes_db',
        db2_t = config['tmp_dir'] + 'user_genes/genes_db.dbtype',
        db2_i = config['tmp_dir'] + 'user_genes/genes_db.index',
        db2_h = config['tmp_dir'] + 'user_genes/genes_db_h',
        db2_ht = config['tmp_dir'] + 'user_genes/genes_db_h.dbtype',
        db2_hi = config['tmp_dir'] + 'user_genes/genes_db_h.index'
    output:
        db = genes_dir + 'cluster_updated/genes_db',
        db_t = genes_dir + 'cluster_updated/genes_db.dbtype',
        db_i = genes_dir + 'cluster_updated/genes_db.index',
        db_h = genes_dir + 'cluster_updated/genes_db_h',
        db_ht = genes_dir + 'cluster_updated/genes_db_h.dbtype',
        db_hi = genes_dir + 'cluster_updated/genes_db_h.index',
        db_clu = expand(genes_dir + 'cluster_updated/clusters_db.{X}',
                                X = range(12)),
        db_clu_t = genes_dir + 'cluster_updated/clusters_db.dbtype',
        db_clu_i = genes_dir + 'cluster_updated/clusters_db.index',
        db_clu_h = genes_dir + 'cluster_updated/clusters_db_h'
    params:
        tmp_dir = config['tmp_dir'] + 'cluster_update'
    resources:
        time = lambda wildcards, attempt: attempt ** 3 * 59,
        mem_gb_pt = lambda wildcards, attempt: attempt * 10
    conda:
        '../../envs/genes.yaml'
    log:
        log_dir + 'mmseqs_cluster_db_update/all.log'
    benchmark:
        benchmark_dir + 'mmseqs_cluster_db_update/all.txt'
    shell:
        """
        rm -rf {params.tmp_dir} && mkdir -p {params.tmp_dir}
        mmseqs clusterupdate {input.db} {input.db2} \
          {input.db_clu} {output.db_clu} {params.tmp_dir} \
          2> {log} 1>&2
        """

rule mmseqs_updated_cluster_membership:
    """ 
    De-replicating genes and taking representatives for diamond query.
    Output table format: cluster_rep<tab>cluster_member
    """
    input:
        db = genes_dir + 'cluster_updated/genes_db',
        db_t = genes_dir + 'cluster_updated/genes_db.dbtype',
        db_i = genes_dir + 'cluster_updated/genes_db.index',
        db_h = genes_dir + 'cluster_updated/genes_db_h',
        db_ht = genes_dir + 'cluster_updated/genes_db_h.dbtype',
        db_hi = genes_dir + 'cluster_updated/genes_db_h.index',
        db_clu = expand(genes_dir + 'cluster_updated/clusters_db.{X}',
                                X = range(12)),
        db_clu_t = genes_dir + 'cluster_updated/clusters_db.dbtype',
        db_clu_i = genes_dir + 'cluster_updated/clusters_db.index',
        db_clu_h = genes_dir + 'cluster_updated/clusters_db_h'
    output:
        tsv = temp(config['tmp_dir'] + 'cluster_updated/clusters_membership.tsv')
    params:
        db_clu = config['tmp_dir'] + 'cluster_updated/clusters_db'
    threads:
        4 
    resources:
        time = lambda wildcards, attempt: attempt ** 3 * 59,
        mem_gb_pt = lambda wildcards, attempt: attempt ** 3 + 5
    conda:
        '../../envs/genes.yaml'
    log:
        log_dir + 'mmseqs2_cluster_membership/all.log'
    benchmark:
        benchmark_dir + 'mmseqs2_cluster_membership/all.txt'
    shell:
        """        
        mmseqs createtsv --threads {threads} {input.db} {input.db} \
          {params.db_clu} {output.tsv} 2> {log} 1>&2
        """
        
rule mmseqs_updated_cluster_rep_db:
    """ 
    De-replicating genes and taking representatives for diamond query
    """
    input:
        db = config['tmp_dir'] + 'cluster/genes_db',
        db_t = config['tmp_dir'] + 'cluster/genes_db.dbtype',
        db_i = config['tmp_dir'] + 'cluster/genes_db.index',
        db_h = config['tmp_dir'] + 'cluster/genes_db_h',
        db_ht = config['tmp_dir'] + 'cluster/genes_db_h.dbtype',
        db_hi = config['tmp_dir'] + 'cluster/genes_db_h.index',
        db_clu = expand(config['tmp_dir'] + 'cluster/clusters_db.{X}',
                        X = range(12)),
        db_clu_t = config['tmp_dir'] + 'cluster/clusters_db.dbtype',
        db_clu_i = config['tmp_dir'] + 'cluster/clusters_db.index',
        db_clu_h = config['tmp_dir'] + 'cluster/clusters_db_h'
    output:
        db = temp(config['tmp_dir'] + 'cluster/clusters_reps_db'),
        db_t = temp(config['tmp_dir'] + 'cluster/clusters_reps_db.dbtype'),
        db_i = temp(config['tmp_dir'] + 'cluster/clusters_reps_db.index'),
        db_h = temp(config['tmp_dir'] + 'cluster/clusters_reps_db_h')
    params:
        db_clu = config['tmp_dir'] + 'cluster/clusters_db'
    resources:
        time = lambda wildcards, attempt: attempt ** 3 * 59,
        mem_gb_pt = lambda wildcards, attempt: attempt ** 3 * 12
    conda:
        '../../envs/genes.yaml'
    log:
        log_dir + 'mmseqs_cluster_rep_db/all.log'
    benchmark:
        benchmark_dir + 'mmseqs_cluster_rep_db/all.txt'
    shell:
        """
        mmseqs createsubdb {params.db_clu} {input.db} {output.db} 2> {log} 1>&2
        """
       
rule mmseqs_updated_cluster_rep_seqs:
    """ 
    De-replicating genes and taking representatives for diamond query
    """
    input:
        db = genes_dir + 'cluster_updated/clusters_reps_db',
        db_t = genes_dir + 'cluster_updated/clusters_reps_db.dbtype',
        db_i = genes_dir + 'cluster_updated/clusters_reps_db.index',
        db_h = genes_dir + 'cluster_updated/clusters_reps_db_h'
    output:
        fasta = temp(config['tmp_dir'] + 'cluster_updated/clusters_reps.faa')
    resources:
        time = lambda wildcards, attempt: attempt ** 3 * 59,
        mem_gb_pt = lambda wildcards, attempt: attempt ** 3 * 12
    conda:
        '../../envs/genes.yaml'
    log:
        log_dir + 'mmseqs_updated_cluster_rep_seqs/all.log'
    benchmark:
        benchmark_dir + 'mmseqs_updated_cluster_rep_seqs/all.txt'
    shell:
        """
        mmseqs convert2fasta {input.db} {output.fasta} 2> {log} 1>&2
        """

rule mmseqs_updated_cluster_rep_seqs_filter:
    """ 
    Filtering rep sequences to just those in new clusters relative to
    the old cluster database. 
    """
    input:
        faa1 = ancient(genes_dir + 'cluster/clusters_reps.faa.gz'),
        faa2 = config['tmp_dir'] + 'cluster_updated/clusters_reps.faa'
    output:
        faa = temp(config['tmp_dir'] + 'cluster_updated/clusters_reps_filter.faa')
    params:
        exe = config['pipeline']['script_folder'] + 'anti_join_seqs.py'
    resources:
        time = lambda wildcards, attempt: attempt ** 3 * 59,
        mem_gb_pt = lambda wildcards, attempt: attempt ** 3 * 10
    conda:
        '../../envs/genes.yaml'
    log:
        log_dir + 'mmseqs_updated_cluster_rep_seqs_filter/all.log'
    benchmark:
        benchmark_dir + 'mmseqs_updated_cluster_rep_seqs_filter/all.txt'
    shell:
        """
        {params.exe} {input.faa2} {input.faa1} > {output.faa} 2> {log}
        """

                
        
