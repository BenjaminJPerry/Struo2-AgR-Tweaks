rule humann3_diamond_db_copy:
    """
    Copying the user-provided DIAMOND database to the temp directory
    """
    input:
        db = ancient(config['params']['humann3']['diamond']['db'])
    output:
        db = temp(config['tmp_dir'] + 'humann3/humann3_dmnd_db.dmnd')
    params:
        ionice = config['params']['ionice']
    resources:
        time = lambda wildcards, attempt: attempt ** 3 * 59,
        mem_gb_pt = lambda wildcards, attempt: attempt * 4
    log:
        log_dir + 'humann3_diamond_db_copy/all.log'
    benchmark:
        benchmark_dir + 'humann3_diamond_db_copy/all.txt'
    shell:
        """
        ionice {params.ionice} cp -f {input} {output} 2> {log} 1>&2 
        """ 

def dmnd_start_mem(wildcards, attempt, threads=12):
    """
    Estimating the baseline memory to use for jobs, given the diamond database size
    """
    prot_db_size = os.stat(config['tmp_dir'] + 'humann3/humann3_dmnd_db.dmnd').st_size / 1e9
    mem = round(prot_db_size * 5 / threads + 1.499,0)
    mem = (attempt - 1) * 2 + mem
    return int(mem)

rule humann3_diamond_pass1:
    """
    Annotating genes via diamond search of UniRef DB
    """
    input:
        faa = config['tmp_dir'] + 'humann3_search/stdin.part_{splitID}.fasta',
	dmnd_db = config['tmp_dir'] + 'humann3/humann3_dmnd_db.dmnd'
    output:
        hits = temp(config['tmp_dir'] + 'humann3/hits_pass1/{splitID}.txt'),
        unaln = temp(config['tmp_dir'] + 'humann3/unaln/{splitID}.faa')
    params:
        params = config['params']['humann3']['diamond']['run'],
        tmp_dir = config['tmp_dir'] + 'humann3_dmnd_TMP/{splitID}/'
    threads:
        8
    resources:
        time = lambda wildcards, attempt: attempt ** 2 * 60 * 12,
        n = lambda wildcards, attempt, threads: threads,
        mem_gb_pt = dmnd_start_mem
    conda:
        '../../../envs/humann3.yaml'
    log:
        log_dir + 'humann3_diamond_pass1/{splitID}.log'
    benchmark:
        benchmark_dir + 'humann3_diamond_pass1/{splitID}.txt'
    shell:
        """
        TMPDIR="{params.tmp_dir}"
        mkdir -p $TMPDIR 2> {log}

        # diamond run
        diamond blastp {params.params} \
          --tmpdir $TMPDIR --threads {threads} \
          -q {input.faa} -d {input.dmnd_db} \
          -o {output.hits} --un {output.unaln} \
          --outfmt 6 qseqid sseqid evalue pident length slen \
          2>> {log} 1>&2
        """

rule humann3_diamond_pass2:
    """
    Annotating genes via diamond search of UniRef DB (sensitive mode)
    """
    input:
        faa = config['tmp_dir'] + 'humann3/unaln/{splitID}.faa',
	dmnd_db = config['tmp_dir'] + 'humann3/humann3_dmnd_db.dmnd'
    output:
        hits = temp(config['tmp_dir'] + 'humann3/hits_pass2/{splitID}.txt')
    params:
        params = config['params']['humann3']['diamond']['run'],
        tmp_dir = config['tmp_dir']  + 'humann3_dmnd_TMP/{splitID}/'
    threads:
        8
    resources:
        time = lambda wildcards, attempt: attempt * 60 * 48,
        n = lambda wildcards, attempt, threads: threads,
        mem_gb_pt = dmnd_start_mem
    conda:
        '../../../envs/humann3.yaml'
    log:
        log_dir + 'humann3_diamond_pass2/{splitID}.log'
    benchmark:
        benchmark_dir + 'humann3_diamond_pass2/{splitID}.txt'
    shell:
        """
        NSEQ=`seqkit seq -n {input.faa} | wc -l 2> {log}`
        if [[ "$NSEQ" -gt "0" ]]; then 
          TMPDIR="{params.tmp_dir}"
          mkdir -p $TMPDIR 2>> {log}
          # diamond run
          diamond blastp --sensitive {params.params} \
            --tmpdir $TMPDIR --threads {threads} \
            -q {input.faa} -d {input.dmnd_db} -o {output.hits} \
            --outfmt 6 qseqid sseqid evalue pident length slen \
            2>> {log} 1>&2
        else
          touch {output.hits} 2> {log} 1>&2
          echo "No unaligned sequences. Skipping DIAMOND" >> {log}
        fi
        """        

localrules: humann3_diamond_merge
        
rule humann3_diamond_merge:
    """
    Merging the results of the 2 DIAMOND passes (all splits).
    Also including all original hits (prior to db update).
    """
    input:
        hits_orig = config['tmp_dir'] + 'humann3/query_hits.txt',  
        hits1 = expand(config['tmp_dir'] + \
                       'humann3/hits_pass1/{splitID}.txt',
	               splitID=config['params']['humann3']['splits']),
        hits2 = expand(config['tmp_dir'] + \
                       'humann3/hits_pass2/{splitID}.txt',
	               splitID=config['params']['humann3']['splits'])
    output:
        hits = temp(config['tmp_dir'] + 'humann3/hits.txt')
    resources:
        time = lambda wildcards, attempt: attempt ** 3 * 59
    run:
        with open(output.hits, 'w') as outF:
            for F in [hits_orig] + input.hits1 + input.hits2:
                with open(F) as inF:
                    for line in inF:
                        outF.write(line)
        
