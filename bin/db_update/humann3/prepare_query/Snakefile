rule humann3_which_to_query:
    """
    Selecting which of the cluster reps need to be queried, given the existing query hits.
    """
    input:
        mem_c = config['tmp_dir'] + 'humann3/clusters_membership.tsv',
        hit_c = config['tmp_dir'] + 'humann3/query_hits.txt',        
        faa_c = config['tmp_dir'] + 'humann3/clusters_reps.faa'
    output:
        faa = config['tmp_dir'] + 'humann3/clusters_reps_filt.faa'
    params:
        exe = config['pipeline']['script_folder'] + 'filter_cluster_reps.py',
        params = config['params']['humann3']['filter_existing']
    resources:
        time = lambda wildcards, attempt: attempt ** 3 * 59,
        mem_gb_pt = lambda wildcards, attempt: attempt * 10
    log:
        log_dir + 'humann3_which_to_query/all.log'
    shell:
        """
        {params.exe} {params.params} \
          {input.mem_c} {input.hit_c} \
          {input.faa_c} > {output.faa} 2> {log}
        """
        
rule humann_query_fasta_split:
    """
    Splitting gene fasta for distributed searching
    """
    input:
        faa = config['tmp_dir'] + 'humann3/clusters_reps_filt.faa'
    output:
        splt = temp(expand(config['tmp_dir'] + \
                           'humann3/clusters_reps_filt.part-{splitID}.faa',
	                   splitID=config['params']['humann3']['splits']))
    params:
        ionice = config['params']['ionice'],
        n_splits = config['params']['humann3']['batches'],
	out_dir = config['tmp_dir'] + 'humann3'
    resources:
        time = lambda wildcards, attempt: attempt ** 3 * 59,
        mem_gb_pt = lambda wildcards, attempt: attempt * 10
    conda:
        '../../../envs/genes.yaml'
    log:
        log_dir + 'mmseqs_search_batch_seqs/all.log'
    benchmark:
        benchmark_dir + 'mmseqs_search_batch_seqs/all.txt'
    shell:
        """    
        echo "# Splitting fasta..." >> {log}
        mkdir -p {params.out_dir} 2>> {log}
        fasta-splitter \
          --n-parts {params.n_splits} \
          --out-dir {params.out_dir} \
          {input.faa} 2>> {log} 1>&2
        """
        
# rule humann3_diamond_batch_seqs:
#     """
#     Splitting gene fasta for distributed searching
#     """
#     input:
#         faa = genes_dir + 'cluster/clusters_reps.faa.gz'
#     output:
#         faa = temp(config['tmp_dir'] + 'fasta_split/clusters_reps.faa'),
#         splt = temp(expand(config['tmp_dir'] + config['db_name'] + \
#                            'humann3_dmnd/clusters_reps.part-{splitID}.faa',
# 	                   splitID=config['params']['humann3']['splits']))
#     params:
#         ionice = config['params']['ionice'],         
#         n_splits = config['params']['humann3']['batches'],
# 	out_dir = config['tmp_dir'] + config['db_name'] + 'humann3_dmnd'
#     resources:
#         time = lambda wildcards, attempt: attempt ** 3 * 59,
#         mem_gb_pt = lambda wildcards, attempt: attempt * 10
#     conda:
#         '../../envs/genes.yaml'
#     log:
#         log_dir + 'humann3_diamond_batch_seqs/{}.log'.format(config['db_name'].rstrip('/'))
#     benchmark:
#         benchmark_dir + 'humann3_diamond_batch_seqs/{}.txt'.format(config['db_name'].rstrip('/'))
#     shell:
#         """
#         echo "# Uncompressing fasta..." > {log}
#         mkdir -p `dirname {output.faa}` 2>> {log}
#         ionice {params.ionice} gunzip -c {input.faa} > {output.faa} 2>> {log}

#         echo "# Splitting fasta..." >> {log}
#         mkdir -p {params.out_dir} 2>> {log}
#         fasta-splitter \
#           --n-parts {params.n_splits} \
#           --out-dir {params.out_dir} \
#           {output.faa} 2>> {log} 1>&2
#         """
