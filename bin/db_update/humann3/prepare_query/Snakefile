rule humann3_which_to_query:
    """
    Selecting which of the cluster reps need to be queried, given the existing query hits.
    """
    input:
        mem_c = config['tmp_dir'] + 'humann3/clusters_membership.tsv',
        hit_c = config['tmp_dir'] + 'humann3/query_hits.txt',        
        faa_c = config['tmp_dir'] + 'humann3/clusters_reps.faa'
    output:
        faa = temp(config['tmp_dir'] + 'humann3/clusters_reps_filt.faa')
    params:
        exe = config['pipeline']['script_folder'] + 'filter_cluster_reps.py',
        params = config['params']['humann3']['filter_existing']
    resources:
        time = lambda wildcards, attempt: attempt ** 3 * 59,
        mem_gb_pt = lambda wildcards, attempt: attempt * 10
    log:
        log_dir + 'humann3_which_to_query/all.log'
    shell:
        """
        {params.exe} {params.params} \
          {input.mem_c} {input.hit_c} \
          {input.faa_c} > {output.faa} 2> {log}
        """
        
rule humann_query_fasta_split:
    """
    Splitting gene fasta for distributed searching
    """
    input:
        faa = config['tmp_dir'] + 'humann3/clusters_reps_filt.faa'
    output:
        done = config['tmp_dir'] + 'humann3_search/split.done',
        splt = temp(expand(config['tmp_dir'] + \
                           'humann3/stdin.part_{splitID}.fasta',
	                   splitID=config['params']['humann3']['splits']))
    params:
        n_splits = config['params']['humann3']['batches']
    resources:
        time = lambda wildcards, attempt: attempt ** 3 * 59,
        mem_gb_pt = lambda wildcards, attempt: attempt * 10
    conda:
        '../../../envs/genes.yaml'
    log:
        log_dir + 'mmseqs_search_batch_seqs/all.log'
    benchmark:
        benchmark_dir + 'mmseqs_search_batch_seqs/all.txt'
    shell:
        """    
        OUTDIR=`dirname {output.done} 2> {log}`
        seqkit shuffle -j 1 --two-pass {input.faa} 2>> {log} | \
          perl -pe 's/^\n//' 2>> {log} | \
          seqkit split -j 1 --by-part {params.n_splits} --out-dir $OUTDIR 2>> {log} 1>&2
        touch {output.done}
        """
        
