#-- database update workflow --#
import gzip

# input processing
## outdir
config['output_dir'] = config['output_dir'].rstrip('/') + '/'
print('\33[33mUsing output directory: {} \x1b[0m'.format(config['output_dir']))

## Samples table
if not os.path.isfile(config['samples_file']):
    raise IOError('Cannot find file: {}'.format(config['samples_file']))
config['samples'] = pd.read_csv(config['samples_file'], sep='\t')
### required columns
for f in [config['samples_col'], config['accession_col'], config['fasta_file_path_col'],
          config['taxID_col'], config['taxonomy_col']]:
    if f not in config['samples'].columns:
        raise ValueError('Cannot find column: {}'.format(f))
config['samples'][config['samples_col']] = config['samples'][config['samples_col']].str.replace('[^A-Za-z0-9]+', '_')
config['samples'] = config['samples'].set_index(config['samples'][config['samples_col']])

### check that files exist (skipping if not)
rowID = 0
to_rm = []
for index,row in config['samples'].iterrows():
    rowID += 1
    file_cols = [config['fasta_file_path_col']]
    for f in file_cols:
        if not os.path.isfile(str(row[f])):
           msg = 'Samples table (Row {}): Cannot find file: {}; Skipping\n'
           sys.stderr.write(msg.format(rowID, row[f]))
           to_rm.append(row[config['samples_col']])
ssw('\33[33mNumber of skipped sample table entries: {}\n\x1b[0m'.format(len(to_rm)))
config['samples'].drop(to_rm, inplace=True)
if config['samples'].shape[0] < 1:
    raise ValueError('No genomes remaining after filtering!')
config['samples_unique'] = config['samples'][config['samples_col']].unique().tolist()

# check that user-gene info (if provided) as all of the required columns
if (not skipped(config['new_genes']['amino_acid']) or
    not skipped(config['new_genes']['nucleotide'])):
    if skipped(config['new_genes']['metadata']) or config['new_genes']['metadata'] == '':
        raise IOError('User-provide genes metadata file not provided, but required!')
    req_cols = ['seq_uuid', 'seq_orig_name', 'genus', 'species', 'taxid']
    if config['new_genes']['metadata'].endswith('.gz'):
        _open = lambda x: gzip.open(x, 'rb')
    else:
        _open = lambda x: open(x)
    with _open(config['new_genes']['metadata']) as inF:        
        for i,line in enumerate(inF):
            if i > 0:
                break
            if config['new_genes']['metadata'].endswith('.gz'):
                line = line.decode('utf-8')
            line = line.rstrip().split('\t')
            missing = [x for x in req_cols if not x in line]
            if len(missing) > 0:
                msg = 'Missing required columns in user-provided genes metadata file: {}'
                raise ValueError(msg.format(','.join(missing)))
            if line[0] != 'seq_uuid':
                msg = 'The first column of the gene metadata table must be "seq_uuid"'
                raise ValueError(msg)

## temp_folder
config['pipeline']['username'] = getpass.getuser()
config['pipeline']['email'] = config['pipeline']['username'] + '@tuebingen.mpg.de'
config['tmp_dir'] = os.path.join(config['tmp_dir'], config['pipeline']['username'])
config['tmp_dir'] = os.path.join(config['tmp_dir'], 'Struo2_' + str(os.stat('.').st_ino) + '/')
print('\33[33mUsing temporary directory: {} \x1b[0m'.format(config['tmp_dir']))

## batches
config['params']['humann3']['splits'] = \
  make_fasta_splits(config['params']['humann3']['batches'])

## including modular snakefiles
print('\33[36m--Running db-update pipeline--\x1b[0m')
snake_dir = config['pipeline']['snakemake_folder']
include: snake_dir + 'bin/dirs'
### Adding genomes to kraken/bracken (user cannot provide gene list)
if not skipped(config['databases']['kraken2']):
    print('\33[36m* Updating kraken2 database\x1b[0m')        
    include: snake_dir + 'bin/db_update/kraken2/Snakefile'
    if not skipped(config['databases']['bracken']):
        print('\33[36m* Updating bracken database\x1b[0m')        
        include: snake_dir + 'bin/db_update/bracken/Snakefile'
### Updating genes db
if not skipped(config['databases']['genes']):
    print('\33[36m* Updating genes database\x1b[0m')
    include: snake_dir + 'bin/db_update/genes/Snakefile'
### updating humann databases
if not skipped(config['databases']['humann3_bowtie2']) and \
   not skipped(config['databases']['humann3_diamond']):
    print('\33[36m* Updating humann database\x1b[0m')
    include: snake_dir + 'bin/db_update/humann3/Snakefile'

